// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: definitions.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "../emulation/definitions.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace example {
namespace peopledensitymeasurementprototype {
namespace model {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* SingleLocationData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SingleLocationData_reflection_ = NULL;
const ::google::protobuf::Descriptor* DensityMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DensityMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* WarnMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WarnMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* LocationMessageWrapper_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LocationMessageWrapper_reflection_ = NULL;
struct LocationMessageWrapperOneofInstance {
  const ::com::example::peopledensitymeasurementprototype::model::proto::SingleLocationData* single_;
  const ::com::example::peopledensitymeasurementprototype::model::proto::DensityMap* map_;
  const ::com::example::peopledensitymeasurementprototype::model::proto::WarnMessage* message_;
}* LocationMessageWrapper_default_oneof_instance_ = NULL;

}  // namespace


void protobuf_AssignDesc_definitions_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_definitions_2eproto() {
  protobuf_AddDesc_definitions_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "definitions.proto");
  GOOGLE_CHECK(file != NULL);
  SingleLocationData_descriptor_ = file->message_type(0);
  static const int SingleLocationData_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleLocationData, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleLocationData, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleLocationData, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleLocationData, hemisphere_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleLocationData, northing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleLocationData, easting_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleLocationData, bearing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleLocationData, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleLocationData, accuracy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleLocationData, ttl_),
  };
  SingleLocationData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SingleLocationData_descriptor_,
      SingleLocationData::default_instance_,
      SingleLocationData_offsets_,
      -1,
      -1,
      -1,
      sizeof(SingleLocationData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleLocationData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleLocationData, _is_default_instance_));
  DensityMap_descriptor_ = file->message_type(1);
  static const int DensityMap_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DensityMap, senderdeviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DensityMap, data_),
  };
  DensityMap_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DensityMap_descriptor_,
      DensityMap::default_instance_,
      DensityMap_offsets_,
      -1,
      -1,
      -1,
      sizeof(DensityMap),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DensityMap, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DensityMap, _is_default_instance_));
  WarnMessage_descriptor_ = file->message_type(2);
  static const int WarnMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarnMessage, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarnMessage, validuntil_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarnMessage, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarnMessage, longitude_),
  };
  WarnMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WarnMessage_descriptor_,
      WarnMessage::default_instance_,
      WarnMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(WarnMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarnMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarnMessage, _is_default_instance_));
  LocationMessageWrapper_descriptor_ = file->message_type(3);
  static const int LocationMessageWrapper_offsets_[4] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(LocationMessageWrapper_default_oneof_instance_, single_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(LocationMessageWrapper_default_oneof_instance_, map_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(LocationMessageWrapper_default_oneof_instance_, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationMessageWrapper, msg_),
  };
  LocationMessageWrapper_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LocationMessageWrapper_descriptor_,
      LocationMessageWrapper::default_instance_,
      LocationMessageWrapper_offsets_,
      -1,
      -1,
      -1,
      LocationMessageWrapper_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationMessageWrapper, _oneof_case_[0]),
      sizeof(LocationMessageWrapper),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationMessageWrapper, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationMessageWrapper, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_definitions_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SingleLocationData_descriptor_, &SingleLocationData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DensityMap_descriptor_, &DensityMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WarnMessage_descriptor_, &WarnMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LocationMessageWrapper_descriptor_, &LocationMessageWrapper::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_definitions_2eproto() {
  delete SingleLocationData::default_instance_;
  delete SingleLocationData_reflection_;
  delete DensityMap::default_instance_;
  delete DensityMap_reflection_;
  delete WarnMessage::default_instance_;
  delete WarnMessage_reflection_;
  delete LocationMessageWrapper::default_instance_;
  delete LocationMessageWrapper_default_oneof_instance_;
  delete LocationMessageWrapper_reflection_;
}

void protobuf_AddDesc_definitions_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_definitions_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021definitions.proto\0229com.example.peopled"
    "ensitymeasurementprototype.model.proto\"\277"
    "\001\n\022SingleLocationData\022\020\n\010deviceId\030\001 \001(\005\022"
    "\021\n\ttimestamp\030\002 \001(\003\022\016\n\006zoneId\030\003 \001(\005\022\022\n\nhe"
    "misphere\030\004 \001(\010\022\020\n\010northing\030\005 \001(\005\022\017\n\007east"
    "ing\030\006 \001(\005\022\017\n\007bearing\030\007 \001(\005\022\r\n\005speed\030\010 \001("
    "\005\022\020\n\010accuracy\030\t \001(\002\022\013\n\003ttl\030\n \001(\005\"\201\001\n\nDen"
    "sityMap\022\026\n\016senderDeviceId\030\001 \001(\005\022[\n\004data\030"
    "\002 \003(\0132M.com.example.peopledensitymeasure"
    "mentprototype.model.proto.SingleLocation"
    "Data\"W\n\013WarnMessage\022\017\n\007message\030\001 \001(\t\022\022\n\n"
    "validUntil\030\002 \001(\003\022\020\n\010latitude\030\003 \001(\001\022\021\n\tlo"
    "ngitude\030\004 \001(\001\"\261\002\n\026LocationMessageWrapper"
    "\022_\n\006single\030\001 \001(\0132M.com.example.peopleden"
    "sitymeasurementprototype.model.proto.Sin"
    "gleLocationDataH\000\022T\n\003map\030\002 \001(\0132E.com.exa"
    "mple.peopledensitymeasurementprototype.m"
    "odel.proto.DensityMapH\000\022Y\n\007message\030\003 \001(\013"
    "2F.com.example.peopledensitymeasurementp"
    "rototype.model.proto.WarnMessageH\000B\005\n\003ms"
    "gB.Z,github.com/matthinc/BachelorThesisP"
    "roject/pbb\006proto3", 857);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "definitions.proto", &protobuf_RegisterTypes);
  SingleLocationData::default_instance_ = new SingleLocationData();
  DensityMap::default_instance_ = new DensityMap();
  WarnMessage::default_instance_ = new WarnMessage();
  LocationMessageWrapper::default_instance_ = new LocationMessageWrapper();
  LocationMessageWrapper_default_oneof_instance_ = new LocationMessageWrapperOneofInstance();
  SingleLocationData::default_instance_->InitAsDefaultInstance();
  DensityMap::default_instance_->InitAsDefaultInstance();
  WarnMessage::default_instance_->InitAsDefaultInstance();
  LocationMessageWrapper::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_definitions_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_definitions_2eproto {
  StaticDescriptorInitializer_definitions_2eproto() {
    protobuf_AddDesc_definitions_2eproto();
  }
} static_descriptor_initializer_definitions_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SingleLocationData::kDeviceIdFieldNumber;
const int SingleLocationData::kTimestampFieldNumber;
const int SingleLocationData::kZoneIdFieldNumber;
const int SingleLocationData::kHemisphereFieldNumber;
const int SingleLocationData::kNorthingFieldNumber;
const int SingleLocationData::kEastingFieldNumber;
const int SingleLocationData::kBearingFieldNumber;
const int SingleLocationData::kSpeedFieldNumber;
const int SingleLocationData::kAccuracyFieldNumber;
const int SingleLocationData::kTtlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SingleLocationData::SingleLocationData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.example.peopledensitymeasurementprototype.model.proto.SingleLocationData)
}

void SingleLocationData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SingleLocationData::SingleLocationData(const SingleLocationData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.example.peopledensitymeasurementprototype.model.proto.SingleLocationData)
}

void SingleLocationData::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  deviceid_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  zoneid_ = 0;
  hemisphere_ = false;
  northing_ = 0;
  easting_ = 0;
  bearing_ = 0;
  speed_ = 0;
  accuracy_ = 0;
  ttl_ = 0;
}

SingleLocationData::~SingleLocationData() {
  // @@protoc_insertion_point(destructor:com.example.peopledensitymeasurementprototype.model.proto.SingleLocationData)
  SharedDtor();
}

void SingleLocationData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SingleLocationData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SingleLocationData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SingleLocationData_descriptor_;
}

const SingleLocationData& SingleLocationData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_definitions_2eproto();
  return *default_instance_;
}

SingleLocationData* SingleLocationData::default_instance_ = NULL;

SingleLocationData* SingleLocationData::New(::google::protobuf::Arena* arena) const {
  SingleLocationData* n = new SingleLocationData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SingleLocationData::Clear() {
// @@protoc_insertion_point(message_clear_start:com.example.peopledensitymeasurementprototype.model.proto.SingleLocationData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SingleLocationData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SingleLocationData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(timestamp_, speed_);
  ZR_(accuracy_, ttl_);

#undef ZR_HELPER_
#undef ZR_

}

bool SingleLocationData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.example.peopledensitymeasurementprototype.model.proto.SingleLocationData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 deviceId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deviceid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_timestamp;
        break;
      }

      // optional int64 timestamp = 2;
      case 2: {
        if (tag == 16) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_zoneId;
        break;
      }

      // optional int32 zoneId = 3;
      case 3: {
        if (tag == 24) {
         parse_zoneId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zoneid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_hemisphere;
        break;
      }

      // optional bool hemisphere = 4;
      case 4: {
        if (tag == 32) {
         parse_hemisphere:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hemisphere_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_northing;
        break;
      }

      // optional int32 northing = 5;
      case 5: {
        if (tag == 40) {
         parse_northing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &northing_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_easting;
        break;
      }

      // optional int32 easting = 6;
      case 6: {
        if (tag == 48) {
         parse_easting:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &easting_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_bearing;
        break;
      }

      // optional int32 bearing = 7;
      case 7: {
        if (tag == 56) {
         parse_bearing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bearing_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_speed;
        break;
      }

      // optional int32 speed = 8;
      case 8: {
        if (tag == 64) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speed_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_accuracy;
        break;
      }

      // optional float accuracy = 9;
      case 9: {
        if (tag == 77) {
         parse_accuracy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &accuracy_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_ttl;
        break;
      }

      // optional int32 ttl = 10;
      case 10: {
        if (tag == 80) {
         parse_ttl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ttl_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.example.peopledensitymeasurementprototype.model.proto.SingleLocationData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.example.peopledensitymeasurementprototype.model.proto.SingleLocationData)
  return false;
#undef DO_
}

void SingleLocationData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.example.peopledensitymeasurementprototype.model.proto.SingleLocationData)
  // optional int32 deviceId = 1;
  if (this->deviceid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->deviceid(), output);
  }

  // optional int64 timestamp = 2;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->timestamp(), output);
  }

  // optional int32 zoneId = 3;
  if (this->zoneid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->zoneid(), output);
  }

  // optional bool hemisphere = 4;
  if (this->hemisphere() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->hemisphere(), output);
  }

  // optional int32 northing = 5;
  if (this->northing() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->northing(), output);
  }

  // optional int32 easting = 6;
  if (this->easting() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->easting(), output);
  }

  // optional int32 bearing = 7;
  if (this->bearing() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->bearing(), output);
  }

  // optional int32 speed = 8;
  if (this->speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->speed(), output);
  }

  // optional float accuracy = 9;
  if (this->accuracy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->accuracy(), output);
  }

  // optional int32 ttl = 10;
  if (this->ttl() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->ttl(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.example.peopledensitymeasurementprototype.model.proto.SingleLocationData)
}

::google::protobuf::uint8* SingleLocationData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.example.peopledensitymeasurementprototype.model.proto.SingleLocationData)
  // optional int32 deviceId = 1;
  if (this->deviceid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->deviceid(), target);
  }

  // optional int64 timestamp = 2;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->timestamp(), target);
  }

  // optional int32 zoneId = 3;
  if (this->zoneid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->zoneid(), target);
  }

  // optional bool hemisphere = 4;
  if (this->hemisphere() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->hemisphere(), target);
  }

  // optional int32 northing = 5;
  if (this->northing() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->northing(), target);
  }

  // optional int32 easting = 6;
  if (this->easting() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->easting(), target);
  }

  // optional int32 bearing = 7;
  if (this->bearing() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->bearing(), target);
  }

  // optional int32 speed = 8;
  if (this->speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->speed(), target);
  }

  // optional float accuracy = 9;
  if (this->accuracy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->accuracy(), target);
  }

  // optional int32 ttl = 10;
  if (this->ttl() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->ttl(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.example.peopledensitymeasurementprototype.model.proto.SingleLocationData)
  return target;
}

int SingleLocationData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:com.example.peopledensitymeasurementprototype.model.proto.SingleLocationData)
  int total_size = 0;

  // optional int32 deviceId = 1;
  if (this->deviceid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->deviceid());
  }

  // optional int64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // optional int32 zoneId = 3;
  if (this->zoneid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->zoneid());
  }

  // optional bool hemisphere = 4;
  if (this->hemisphere() != 0) {
    total_size += 1 + 1;
  }

  // optional int32 northing = 5;
  if (this->northing() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->northing());
  }

  // optional int32 easting = 6;
  if (this->easting() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->easting());
  }

  // optional int32 bearing = 7;
  if (this->bearing() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bearing());
  }

  // optional int32 speed = 8;
  if (this->speed() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->speed());
  }

  // optional float accuracy = 9;
  if (this->accuracy() != 0) {
    total_size += 1 + 4;
  }

  // optional int32 ttl = 10;
  if (this->ttl() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ttl());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SingleLocationData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.example.peopledensitymeasurementprototype.model.proto.SingleLocationData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SingleLocationData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SingleLocationData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.example.peopledensitymeasurementprototype.model.proto.SingleLocationData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.example.peopledensitymeasurementprototype.model.proto.SingleLocationData)
    MergeFrom(*source);
  }
}

void SingleLocationData::MergeFrom(const SingleLocationData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.example.peopledensitymeasurementprototype.model.proto.SingleLocationData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.deviceid() != 0) {
    set_deviceid(from.deviceid());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.zoneid() != 0) {
    set_zoneid(from.zoneid());
  }
  if (from.hemisphere() != 0) {
    set_hemisphere(from.hemisphere());
  }
  if (from.northing() != 0) {
    set_northing(from.northing());
  }
  if (from.easting() != 0) {
    set_easting(from.easting());
  }
  if (from.bearing() != 0) {
    set_bearing(from.bearing());
  }
  if (from.speed() != 0) {
    set_speed(from.speed());
  }
  if (from.accuracy() != 0) {
    set_accuracy(from.accuracy());
  }
  if (from.ttl() != 0) {
    set_ttl(from.ttl());
  }
}

void SingleLocationData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.example.peopledensitymeasurementprototype.model.proto.SingleLocationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleLocationData::CopyFrom(const SingleLocationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.example.peopledensitymeasurementprototype.model.proto.SingleLocationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleLocationData::IsInitialized() const {

  return true;
}

void SingleLocationData::Swap(SingleLocationData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SingleLocationData::InternalSwap(SingleLocationData* other) {
  std::swap(deviceid_, other->deviceid_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(zoneid_, other->zoneid_);
  std::swap(hemisphere_, other->hemisphere_);
  std::swap(northing_, other->northing_);
  std::swap(easting_, other->easting_);
  std::swap(bearing_, other->bearing_);
  std::swap(speed_, other->speed_);
  std::swap(accuracy_, other->accuracy_);
  std::swap(ttl_, other->ttl_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SingleLocationData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SingleLocationData_descriptor_;
  metadata.reflection = SingleLocationData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SingleLocationData

// optional int32 deviceId = 1;
void SingleLocationData::clear_deviceid() {
  deviceid_ = 0;
}
 ::google::protobuf::int32 SingleLocationData::deviceid() const {
  // @@protoc_insertion_point(field_get:com.example.peopledensitymeasurementprototype.model.proto.SingleLocationData.deviceId)
  return deviceid_;
}
 void SingleLocationData::set_deviceid(::google::protobuf::int32 value) {
  
  deviceid_ = value;
  // @@protoc_insertion_point(field_set:com.example.peopledensitymeasurementprototype.model.proto.SingleLocationData.deviceId)
}

// optional int64 timestamp = 2;
void SingleLocationData::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 SingleLocationData::timestamp() const {
  // @@protoc_insertion_point(field_get:com.example.peopledensitymeasurementprototype.model.proto.SingleLocationData.timestamp)
  return timestamp_;
}
 void SingleLocationData::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:com.example.peopledensitymeasurementprototype.model.proto.SingleLocationData.timestamp)
}

// optional int32 zoneId = 3;
void SingleLocationData::clear_zoneid() {
  zoneid_ = 0;
}
 ::google::protobuf::int32 SingleLocationData::zoneid() const {
  // @@protoc_insertion_point(field_get:com.example.peopledensitymeasurementprototype.model.proto.SingleLocationData.zoneId)
  return zoneid_;
}
 void SingleLocationData::set_zoneid(::google::protobuf::int32 value) {
  
  zoneid_ = value;
  // @@protoc_insertion_point(field_set:com.example.peopledensitymeasurementprototype.model.proto.SingleLocationData.zoneId)
}

// optional bool hemisphere = 4;
void SingleLocationData::clear_hemisphere() {
  hemisphere_ = false;
}
 bool SingleLocationData::hemisphere() const {
  // @@protoc_insertion_point(field_get:com.example.peopledensitymeasurementprototype.model.proto.SingleLocationData.hemisphere)
  return hemisphere_;
}
 void SingleLocationData::set_hemisphere(bool value) {
  
  hemisphere_ = value;
  // @@protoc_insertion_point(field_set:com.example.peopledensitymeasurementprototype.model.proto.SingleLocationData.hemisphere)
}

// optional int32 northing = 5;
void SingleLocationData::clear_northing() {
  northing_ = 0;
}
 ::google::protobuf::int32 SingleLocationData::northing() const {
  // @@protoc_insertion_point(field_get:com.example.peopledensitymeasurementprototype.model.proto.SingleLocationData.northing)
  return northing_;
}
 void SingleLocationData::set_northing(::google::protobuf::int32 value) {
  
  northing_ = value;
  // @@protoc_insertion_point(field_set:com.example.peopledensitymeasurementprototype.model.proto.SingleLocationData.northing)
}

// optional int32 easting = 6;
void SingleLocationData::clear_easting() {
  easting_ = 0;
}
 ::google::protobuf::int32 SingleLocationData::easting() const {
  // @@protoc_insertion_point(field_get:com.example.peopledensitymeasurementprototype.model.proto.SingleLocationData.easting)
  return easting_;
}
 void SingleLocationData::set_easting(::google::protobuf::int32 value) {
  
  easting_ = value;
  // @@protoc_insertion_point(field_set:com.example.peopledensitymeasurementprototype.model.proto.SingleLocationData.easting)
}

// optional int32 bearing = 7;
void SingleLocationData::clear_bearing() {
  bearing_ = 0;
}
 ::google::protobuf::int32 SingleLocationData::bearing() const {
  // @@protoc_insertion_point(field_get:com.example.peopledensitymeasurementprototype.model.proto.SingleLocationData.bearing)
  return bearing_;
}
 void SingleLocationData::set_bearing(::google::protobuf::int32 value) {
  
  bearing_ = value;
  // @@protoc_insertion_point(field_set:com.example.peopledensitymeasurementprototype.model.proto.SingleLocationData.bearing)
}

// optional int32 speed = 8;
void SingleLocationData::clear_speed() {
  speed_ = 0;
}
 ::google::protobuf::int32 SingleLocationData::speed() const {
  // @@protoc_insertion_point(field_get:com.example.peopledensitymeasurementprototype.model.proto.SingleLocationData.speed)
  return speed_;
}
 void SingleLocationData::set_speed(::google::protobuf::int32 value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:com.example.peopledensitymeasurementprototype.model.proto.SingleLocationData.speed)
}

// optional float accuracy = 9;
void SingleLocationData::clear_accuracy() {
  accuracy_ = 0;
}
 float SingleLocationData::accuracy() const {
  // @@protoc_insertion_point(field_get:com.example.peopledensitymeasurementprototype.model.proto.SingleLocationData.accuracy)
  return accuracy_;
}
 void SingleLocationData::set_accuracy(float value) {
  
  accuracy_ = value;
  // @@protoc_insertion_point(field_set:com.example.peopledensitymeasurementprototype.model.proto.SingleLocationData.accuracy)
}

// optional int32 ttl = 10;
void SingleLocationData::clear_ttl() {
  ttl_ = 0;
}
 ::google::protobuf::int32 SingleLocationData::ttl() const {
  // @@protoc_insertion_point(field_get:com.example.peopledensitymeasurementprototype.model.proto.SingleLocationData.ttl)
  return ttl_;
}
 void SingleLocationData::set_ttl(::google::protobuf::int32 value) {
  
  ttl_ = value;
  // @@protoc_insertion_point(field_set:com.example.peopledensitymeasurementprototype.model.proto.SingleLocationData.ttl)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DensityMap::kSenderDeviceIdFieldNumber;
const int DensityMap::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DensityMap::DensityMap()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.example.peopledensitymeasurementprototype.model.proto.DensityMap)
}

void DensityMap::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DensityMap::DensityMap(const DensityMap& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.example.peopledensitymeasurementprototype.model.proto.DensityMap)
}

void DensityMap::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  senderdeviceid_ = 0;
}

DensityMap::~DensityMap() {
  // @@protoc_insertion_point(destructor:com.example.peopledensitymeasurementprototype.model.proto.DensityMap)
  SharedDtor();
}

void DensityMap::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DensityMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DensityMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DensityMap_descriptor_;
}

const DensityMap& DensityMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_definitions_2eproto();
  return *default_instance_;
}

DensityMap* DensityMap::default_instance_ = NULL;

DensityMap* DensityMap::New(::google::protobuf::Arena* arena) const {
  DensityMap* n = new DensityMap;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DensityMap::Clear() {
// @@protoc_insertion_point(message_clear_start:com.example.peopledensitymeasurementprototype.model.proto.DensityMap)
  senderdeviceid_ = 0;
  data_.Clear();
}

bool DensityMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.example.peopledensitymeasurementprototype.model.proto.DensityMap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 senderDeviceId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &senderdeviceid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // repeated .com.example.peopledensitymeasurementprototype.model.proto.SingleLocationData data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(input->IncrementRecursionDepth());
         parse_loop_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_data;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.example.peopledensitymeasurementprototype.model.proto.DensityMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.example.peopledensitymeasurementprototype.model.proto.DensityMap)
  return false;
#undef DO_
}

void DensityMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.example.peopledensitymeasurementprototype.model.proto.DensityMap)
  // optional int32 senderDeviceId = 1;
  if (this->senderdeviceid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->senderdeviceid(), output);
  }

  // repeated .com.example.peopledensitymeasurementprototype.model.proto.SingleLocationData data = 2;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(i), output);
  }

  // @@protoc_insertion_point(serialize_end:com.example.peopledensitymeasurementprototype.model.proto.DensityMap)
}

::google::protobuf::uint8* DensityMap::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.example.peopledensitymeasurementprototype.model.proto.DensityMap)
  // optional int32 senderDeviceId = 1;
  if (this->senderdeviceid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->senderdeviceid(), target);
  }

  // repeated .com.example.peopledensitymeasurementprototype.model.proto.SingleLocationData data = 2;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->data(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.example.peopledensitymeasurementprototype.model.proto.DensityMap)
  return target;
}

int DensityMap::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:com.example.peopledensitymeasurementprototype.model.proto.DensityMap)
  int total_size = 0;

  // optional int32 senderDeviceId = 1;
  if (this->senderdeviceid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->senderdeviceid());
  }

  // repeated .com.example.peopledensitymeasurementprototype.model.proto.SingleLocationData data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DensityMap::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.example.peopledensitymeasurementprototype.model.proto.DensityMap)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DensityMap* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DensityMap>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.example.peopledensitymeasurementprototype.model.proto.DensityMap)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.example.peopledensitymeasurementprototype.model.proto.DensityMap)
    MergeFrom(*source);
  }
}

void DensityMap::MergeFrom(const DensityMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.example.peopledensitymeasurementprototype.model.proto.DensityMap)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  data_.MergeFrom(from.data_);
  if (from.senderdeviceid() != 0) {
    set_senderdeviceid(from.senderdeviceid());
  }
}

void DensityMap::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.example.peopledensitymeasurementprototype.model.proto.DensityMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DensityMap::CopyFrom(const DensityMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.example.peopledensitymeasurementprototype.model.proto.DensityMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DensityMap::IsInitialized() const {

  return true;
}

void DensityMap::Swap(DensityMap* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DensityMap::InternalSwap(DensityMap* other) {
  std::swap(senderdeviceid_, other->senderdeviceid_);
  data_.UnsafeArenaSwap(&other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DensityMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DensityMap_descriptor_;
  metadata.reflection = DensityMap_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DensityMap

// optional int32 senderDeviceId = 1;
void DensityMap::clear_senderdeviceid() {
  senderdeviceid_ = 0;
}
 ::google::protobuf::int32 DensityMap::senderdeviceid() const {
  // @@protoc_insertion_point(field_get:com.example.peopledensitymeasurementprototype.model.proto.DensityMap.senderDeviceId)
  return senderdeviceid_;
}
 void DensityMap::set_senderdeviceid(::google::protobuf::int32 value) {
  
  senderdeviceid_ = value;
  // @@protoc_insertion_point(field_set:com.example.peopledensitymeasurementprototype.model.proto.DensityMap.senderDeviceId)
}

// repeated .com.example.peopledensitymeasurementprototype.model.proto.SingleLocationData data = 2;
int DensityMap::data_size() const {
  return data_.size();
}
void DensityMap::clear_data() {
  data_.Clear();
}
const ::com::example::peopledensitymeasurementprototype::model::proto::SingleLocationData& DensityMap::data(int index) const {
  // @@protoc_insertion_point(field_get:com.example.peopledensitymeasurementprototype.model.proto.DensityMap.data)
  return data_.Get(index);
}
::com::example::peopledensitymeasurementprototype::model::proto::SingleLocationData* DensityMap::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:com.example.peopledensitymeasurementprototype.model.proto.DensityMap.data)
  return data_.Mutable(index);
}
::com::example::peopledensitymeasurementprototype::model::proto::SingleLocationData* DensityMap::add_data() {
  // @@protoc_insertion_point(field_add:com.example.peopledensitymeasurementprototype.model.proto.DensityMap.data)
  return data_.Add();
}
::google::protobuf::RepeatedPtrField< ::com::example::peopledensitymeasurementprototype::model::proto::SingleLocationData >*
DensityMap::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:com.example.peopledensitymeasurementprototype.model.proto.DensityMap.data)
  return &data_;
}
const ::google::protobuf::RepeatedPtrField< ::com::example::peopledensitymeasurementprototype::model::proto::SingleLocationData >&
DensityMap::data() const {
  // @@protoc_insertion_point(field_list:com.example.peopledensitymeasurementprototype.model.proto.DensityMap.data)
  return data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WarnMessage::kMessageFieldNumber;
const int WarnMessage::kValidUntilFieldNumber;
const int WarnMessage::kLatitudeFieldNumber;
const int WarnMessage::kLongitudeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WarnMessage::WarnMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.example.peopledensitymeasurementprototype.model.proto.WarnMessage)
}

void WarnMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

WarnMessage::WarnMessage(const WarnMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.example.peopledensitymeasurementprototype.model.proto.WarnMessage)
}

void WarnMessage::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  validuntil_ = GOOGLE_LONGLONG(0);
  latitude_ = 0;
  longitude_ = 0;
}

WarnMessage::~WarnMessage() {
  // @@protoc_insertion_point(destructor:com.example.peopledensitymeasurementprototype.model.proto.WarnMessage)
  SharedDtor();
}

void WarnMessage::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void WarnMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WarnMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WarnMessage_descriptor_;
}

const WarnMessage& WarnMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_definitions_2eproto();
  return *default_instance_;
}

WarnMessage* WarnMessage::default_instance_ = NULL;

WarnMessage* WarnMessage::New(::google::protobuf::Arena* arena) const {
  WarnMessage* n = new WarnMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WarnMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:com.example.peopledensitymeasurementprototype.model.proto.WarnMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(WarnMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<WarnMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(validuntil_, longitude_);
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool WarnMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.example.peopledensitymeasurementprototype.model.proto.WarnMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string message = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.example.peopledensitymeasurementprototype.model.proto.WarnMessage.message"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_validUntil;
        break;
      }

      // optional int64 validUntil = 2;
      case 2: {
        if (tag == 16) {
         parse_validUntil:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &validuntil_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_latitude;
        break;
      }

      // optional double latitude = 3;
      case 3: {
        if (tag == 25) {
         parse_latitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_longitude;
        break;
      }

      // optional double longitude = 4;
      case 4: {
        if (tag == 33) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.example.peopledensitymeasurementprototype.model.proto.WarnMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.example.peopledensitymeasurementprototype.model.proto.WarnMessage)
  return false;
#undef DO_
}

void WarnMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.example.peopledensitymeasurementprototype.model.proto.WarnMessage)
  // optional string message = 1;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.example.peopledensitymeasurementprototype.model.proto.WarnMessage.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  // optional int64 validUntil = 2;
  if (this->validuntil() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->validuntil(), output);
  }

  // optional double latitude = 3;
  if (this->latitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->latitude(), output);
  }

  // optional double longitude = 4;
  if (this->longitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->longitude(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.example.peopledensitymeasurementprototype.model.proto.WarnMessage)
}

::google::protobuf::uint8* WarnMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.example.peopledensitymeasurementprototype.model.proto.WarnMessage)
  // optional string message = 1;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.example.peopledensitymeasurementprototype.model.proto.WarnMessage.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  // optional int64 validUntil = 2;
  if (this->validuntil() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->validuntil(), target);
  }

  // optional double latitude = 3;
  if (this->latitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->latitude(), target);
  }

  // optional double longitude = 4;
  if (this->longitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->longitude(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.example.peopledensitymeasurementprototype.model.proto.WarnMessage)
  return target;
}

int WarnMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:com.example.peopledensitymeasurementprototype.model.proto.WarnMessage)
  int total_size = 0;

  // optional string message = 1;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  // optional int64 validUntil = 2;
  if (this->validuntil() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->validuntil());
  }

  // optional double latitude = 3;
  if (this->latitude() != 0) {
    total_size += 1 + 8;
  }

  // optional double longitude = 4;
  if (this->longitude() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WarnMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.example.peopledensitymeasurementprototype.model.proto.WarnMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const WarnMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const WarnMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.example.peopledensitymeasurementprototype.model.proto.WarnMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.example.peopledensitymeasurementprototype.model.proto.WarnMessage)
    MergeFrom(*source);
  }
}

void WarnMessage::MergeFrom(const WarnMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.example.peopledensitymeasurementprototype.model.proto.WarnMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.validuntil() != 0) {
    set_validuntil(from.validuntil());
  }
  if (from.latitude() != 0) {
    set_latitude(from.latitude());
  }
  if (from.longitude() != 0) {
    set_longitude(from.longitude());
  }
}

void WarnMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.example.peopledensitymeasurementprototype.model.proto.WarnMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WarnMessage::CopyFrom(const WarnMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.example.peopledensitymeasurementprototype.model.proto.WarnMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WarnMessage::IsInitialized() const {

  return true;
}

void WarnMessage::Swap(WarnMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WarnMessage::InternalSwap(WarnMessage* other) {
  message_.Swap(&other->message_);
  std::swap(validuntil_, other->validuntil_);
  std::swap(latitude_, other->latitude_);
  std::swap(longitude_, other->longitude_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WarnMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WarnMessage_descriptor_;
  metadata.reflection = WarnMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WarnMessage

// optional string message = 1;
void WarnMessage::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& WarnMessage::message() const {
  // @@protoc_insertion_point(field_get:com.example.peopledensitymeasurementprototype.model.proto.WarnMessage.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WarnMessage::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.example.peopledensitymeasurementprototype.model.proto.WarnMessage.message)
}
 void WarnMessage::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.example.peopledensitymeasurementprototype.model.proto.WarnMessage.message)
}
 void WarnMessage::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.example.peopledensitymeasurementprototype.model.proto.WarnMessage.message)
}
 ::std::string* WarnMessage::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:com.example.peopledensitymeasurementprototype.model.proto.WarnMessage.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* WarnMessage::release_message() {
  // @@protoc_insertion_point(field_release:com.example.peopledensitymeasurementprototype.model.proto.WarnMessage.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WarnMessage::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:com.example.peopledensitymeasurementprototype.model.proto.WarnMessage.message)
}

// optional int64 validUntil = 2;
void WarnMessage::clear_validuntil() {
  validuntil_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 WarnMessage::validuntil() const {
  // @@protoc_insertion_point(field_get:com.example.peopledensitymeasurementprototype.model.proto.WarnMessage.validUntil)
  return validuntil_;
}
 void WarnMessage::set_validuntil(::google::protobuf::int64 value) {
  
  validuntil_ = value;
  // @@protoc_insertion_point(field_set:com.example.peopledensitymeasurementprototype.model.proto.WarnMessage.validUntil)
}

// optional double latitude = 3;
void WarnMessage::clear_latitude() {
  latitude_ = 0;
}
 double WarnMessage::latitude() const {
  // @@protoc_insertion_point(field_get:com.example.peopledensitymeasurementprototype.model.proto.WarnMessage.latitude)
  return latitude_;
}
 void WarnMessage::set_latitude(double value) {
  
  latitude_ = value;
  // @@protoc_insertion_point(field_set:com.example.peopledensitymeasurementprototype.model.proto.WarnMessage.latitude)
}

// optional double longitude = 4;
void WarnMessage::clear_longitude() {
  longitude_ = 0;
}
 double WarnMessage::longitude() const {
  // @@protoc_insertion_point(field_get:com.example.peopledensitymeasurementprototype.model.proto.WarnMessage.longitude)
  return longitude_;
}
 void WarnMessage::set_longitude(double value) {
  
  longitude_ = value;
  // @@protoc_insertion_point(field_set:com.example.peopledensitymeasurementprototype.model.proto.WarnMessage.longitude)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LocationMessageWrapper::kSingleFieldNumber;
const int LocationMessageWrapper::kMapFieldNumber;
const int LocationMessageWrapper::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LocationMessageWrapper::LocationMessageWrapper()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.example.peopledensitymeasurementprototype.model.proto.LocationMessageWrapper)
}

void LocationMessageWrapper::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  LocationMessageWrapper_default_oneof_instance_->single_ = const_cast< ::com::example::peopledensitymeasurementprototype::model::proto::SingleLocationData*>(&::com::example::peopledensitymeasurementprototype::model::proto::SingleLocationData::default_instance());
  LocationMessageWrapper_default_oneof_instance_->map_ = const_cast< ::com::example::peopledensitymeasurementprototype::model::proto::DensityMap*>(&::com::example::peopledensitymeasurementprototype::model::proto::DensityMap::default_instance());
  LocationMessageWrapper_default_oneof_instance_->message_ = const_cast< ::com::example::peopledensitymeasurementprototype::model::proto::WarnMessage*>(&::com::example::peopledensitymeasurementprototype::model::proto::WarnMessage::default_instance());
}

LocationMessageWrapper::LocationMessageWrapper(const LocationMessageWrapper& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.example.peopledensitymeasurementprototype.model.proto.LocationMessageWrapper)
}

void LocationMessageWrapper::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  clear_has_msg();
}

LocationMessageWrapper::~LocationMessageWrapper() {
  // @@protoc_insertion_point(destructor:com.example.peopledensitymeasurementprototype.model.proto.LocationMessageWrapper)
  SharedDtor();
}

void LocationMessageWrapper::SharedDtor() {
  if (has_msg()) {
    clear_msg();
  }
  if (this != default_instance_) {
  }
}

void LocationMessageWrapper::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LocationMessageWrapper::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LocationMessageWrapper_descriptor_;
}

const LocationMessageWrapper& LocationMessageWrapper::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_definitions_2eproto();
  return *default_instance_;
}

LocationMessageWrapper* LocationMessageWrapper::default_instance_ = NULL;

LocationMessageWrapper* LocationMessageWrapper::New(::google::protobuf::Arena* arena) const {
  LocationMessageWrapper* n = new LocationMessageWrapper;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LocationMessageWrapper::clear_msg() {
// @@protoc_insertion_point(one_of_clear_start:com.example.peopledensitymeasurementprototype.model.proto.LocationMessageWrapper)
  switch(msg_case()) {
    case kSingle: {
      delete msg_.single_;
      break;
    }
    case kMap: {
      delete msg_.map_;
      break;
    }
    case kMessage: {
      delete msg_.message_;
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MSG_NOT_SET;
}


void LocationMessageWrapper::Clear() {
// @@protoc_insertion_point(message_clear_start:com.example.peopledensitymeasurementprototype.model.proto.LocationMessageWrapper)
  clear_msg();
}

bool LocationMessageWrapper::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.example.peopledensitymeasurementprototype.model.proto.LocationMessageWrapper)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.example.peopledensitymeasurementprototype.model.proto.SingleLocationData single = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_single()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_map;
        break;
      }

      // optional .com.example.peopledensitymeasurementprototype.model.proto.DensityMap map = 2;
      case 2: {
        if (tag == 18) {
         parse_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_map()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_message;
        break;
      }

      // optional .com.example.peopledensitymeasurementprototype.model.proto.WarnMessage message = 3;
      case 3: {
        if (tag == 26) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.example.peopledensitymeasurementprototype.model.proto.LocationMessageWrapper)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.example.peopledensitymeasurementprototype.model.proto.LocationMessageWrapper)
  return false;
#undef DO_
}

void LocationMessageWrapper::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.example.peopledensitymeasurementprototype.model.proto.LocationMessageWrapper)
  // optional .com.example.peopledensitymeasurementprototype.model.proto.SingleLocationData single = 1;
  if (has_single()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *msg_.single_, output);
  }

  // optional .com.example.peopledensitymeasurementprototype.model.proto.DensityMap map = 2;
  if (has_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *msg_.map_, output);
  }

  // optional .com.example.peopledensitymeasurementprototype.model.proto.WarnMessage message = 3;
  if (has_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *msg_.message_, output);
  }

  // @@protoc_insertion_point(serialize_end:com.example.peopledensitymeasurementprototype.model.proto.LocationMessageWrapper)
}

::google::protobuf::uint8* LocationMessageWrapper::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.example.peopledensitymeasurementprototype.model.proto.LocationMessageWrapper)
  // optional .com.example.peopledensitymeasurementprototype.model.proto.SingleLocationData single = 1;
  if (has_single()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *msg_.single_, false, target);
  }

  // optional .com.example.peopledensitymeasurementprototype.model.proto.DensityMap map = 2;
  if (has_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *msg_.map_, false, target);
  }

  // optional .com.example.peopledensitymeasurementprototype.model.proto.WarnMessage message = 3;
  if (has_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *msg_.message_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.example.peopledensitymeasurementprototype.model.proto.LocationMessageWrapper)
  return target;
}

int LocationMessageWrapper::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:com.example.peopledensitymeasurementprototype.model.proto.LocationMessageWrapper)
  int total_size = 0;

  switch (msg_case()) {
    // optional .com.example.peopledensitymeasurementprototype.model.proto.SingleLocationData single = 1;
    case kSingle: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_.single_);
      break;
    }
    // optional .com.example.peopledensitymeasurementprototype.model.proto.DensityMap map = 2;
    case kMap: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_.map_);
      break;
    }
    // optional .com.example.peopledensitymeasurementprototype.model.proto.WarnMessage message = 3;
    case kMessage: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_.message_);
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocationMessageWrapper::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.example.peopledensitymeasurementprototype.model.proto.LocationMessageWrapper)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LocationMessageWrapper* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LocationMessageWrapper>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.example.peopledensitymeasurementprototype.model.proto.LocationMessageWrapper)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.example.peopledensitymeasurementprototype.model.proto.LocationMessageWrapper)
    MergeFrom(*source);
  }
}

void LocationMessageWrapper::MergeFrom(const LocationMessageWrapper& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.example.peopledensitymeasurementprototype.model.proto.LocationMessageWrapper)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.msg_case()) {
    case kSingle: {
      mutable_single()->::com::example::peopledensitymeasurementprototype::model::proto::SingleLocationData::MergeFrom(from.single());
      break;
    }
    case kMap: {
      mutable_map()->::com::example::peopledensitymeasurementprototype::model::proto::DensityMap::MergeFrom(from.map());
      break;
    }
    case kMessage: {
      mutable_message()->::com::example::peopledensitymeasurementprototype::model::proto::WarnMessage::MergeFrom(from.message());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
}

void LocationMessageWrapper::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.example.peopledensitymeasurementprototype.model.proto.LocationMessageWrapper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocationMessageWrapper::CopyFrom(const LocationMessageWrapper& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.example.peopledensitymeasurementprototype.model.proto.LocationMessageWrapper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocationMessageWrapper::IsInitialized() const {

  return true;
}

void LocationMessageWrapper::Swap(LocationMessageWrapper* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LocationMessageWrapper::InternalSwap(LocationMessageWrapper* other) {
  std::swap(msg_, other->msg_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LocationMessageWrapper::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LocationMessageWrapper_descriptor_;
  metadata.reflection = LocationMessageWrapper_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LocationMessageWrapper

// optional .com.example.peopledensitymeasurementprototype.model.proto.SingleLocationData single = 1;
bool LocationMessageWrapper::has_single() const {
  return msg_case() == kSingle;
}
void LocationMessageWrapper::set_has_single() {
  _oneof_case_[0] = kSingle;
}
void LocationMessageWrapper::clear_single() {
  if (has_single()) {
    delete msg_.single_;
    clear_has_msg();
  }
}
 const ::com::example::peopledensitymeasurementprototype::model::proto::SingleLocationData& LocationMessageWrapper::single() const {
  // @@protoc_insertion_point(field_get:com.example.peopledensitymeasurementprototype.model.proto.LocationMessageWrapper.single)
  return has_single()
      ? *msg_.single_
      : ::com::example::peopledensitymeasurementprototype::model::proto::SingleLocationData::default_instance();
}
::com::example::peopledensitymeasurementprototype::model::proto::SingleLocationData* LocationMessageWrapper::mutable_single() {
  if (!has_single()) {
    clear_msg();
    set_has_single();
    msg_.single_ = new ::com::example::peopledensitymeasurementprototype::model::proto::SingleLocationData;
  }
  // @@protoc_insertion_point(field_mutable:com.example.peopledensitymeasurementprototype.model.proto.LocationMessageWrapper.single)
  return msg_.single_;
}
::com::example::peopledensitymeasurementprototype::model::proto::SingleLocationData* LocationMessageWrapper::release_single() {
  // @@protoc_insertion_point(field_release:com.example.peopledensitymeasurementprototype.model.proto.LocationMessageWrapper.single)
  if (has_single()) {
    clear_has_msg();
    ::com::example::peopledensitymeasurementprototype::model::proto::SingleLocationData* temp = msg_.single_;
    msg_.single_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void LocationMessageWrapper::set_allocated_single(::com::example::peopledensitymeasurementprototype::model::proto::SingleLocationData* single) {
  clear_msg();
  if (single) {
    set_has_single();
    msg_.single_ = single;
  }
  // @@protoc_insertion_point(field_set_allocated:com.example.peopledensitymeasurementprototype.model.proto.LocationMessageWrapper.single)
}

// optional .com.example.peopledensitymeasurementprototype.model.proto.DensityMap map = 2;
bool LocationMessageWrapper::has_map() const {
  return msg_case() == kMap;
}
void LocationMessageWrapper::set_has_map() {
  _oneof_case_[0] = kMap;
}
void LocationMessageWrapper::clear_map() {
  if (has_map()) {
    delete msg_.map_;
    clear_has_msg();
  }
}
 const ::com::example::peopledensitymeasurementprototype::model::proto::DensityMap& LocationMessageWrapper::map() const {
  // @@protoc_insertion_point(field_get:com.example.peopledensitymeasurementprototype.model.proto.LocationMessageWrapper.map)
  return has_map()
      ? *msg_.map_
      : ::com::example::peopledensitymeasurementprototype::model::proto::DensityMap::default_instance();
}
::com::example::peopledensitymeasurementprototype::model::proto::DensityMap* LocationMessageWrapper::mutable_map() {
  if (!has_map()) {
    clear_msg();
    set_has_map();
    msg_.map_ = new ::com::example::peopledensitymeasurementprototype::model::proto::DensityMap;
  }
  // @@protoc_insertion_point(field_mutable:com.example.peopledensitymeasurementprototype.model.proto.LocationMessageWrapper.map)
  return msg_.map_;
}
::com::example::peopledensitymeasurementprototype::model::proto::DensityMap* LocationMessageWrapper::release_map() {
  // @@protoc_insertion_point(field_release:com.example.peopledensitymeasurementprototype.model.proto.LocationMessageWrapper.map)
  if (has_map()) {
    clear_has_msg();
    ::com::example::peopledensitymeasurementprototype::model::proto::DensityMap* temp = msg_.map_;
    msg_.map_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void LocationMessageWrapper::set_allocated_map(::com::example::peopledensitymeasurementprototype::model::proto::DensityMap* map) {
  clear_msg();
  if (map) {
    set_has_map();
    msg_.map_ = map;
  }
  // @@protoc_insertion_point(field_set_allocated:com.example.peopledensitymeasurementprototype.model.proto.LocationMessageWrapper.map)
}

// optional .com.example.peopledensitymeasurementprototype.model.proto.WarnMessage message = 3;
bool LocationMessageWrapper::has_message() const {
  return msg_case() == kMessage;
}
void LocationMessageWrapper::set_has_message() {
  _oneof_case_[0] = kMessage;
}
void LocationMessageWrapper::clear_message() {
  if (has_message()) {
    delete msg_.message_;
    clear_has_msg();
  }
}
 const ::com::example::peopledensitymeasurementprototype::model::proto::WarnMessage& LocationMessageWrapper::message() const {
  // @@protoc_insertion_point(field_get:com.example.peopledensitymeasurementprototype.model.proto.LocationMessageWrapper.message)
  return has_message()
      ? *msg_.message_
      : ::com::example::peopledensitymeasurementprototype::model::proto::WarnMessage::default_instance();
}
::com::example::peopledensitymeasurementprototype::model::proto::WarnMessage* LocationMessageWrapper::mutable_message() {
  if (!has_message()) {
    clear_msg();
    set_has_message();
    msg_.message_ = new ::com::example::peopledensitymeasurementprototype::model::proto::WarnMessage;
  }
  // @@protoc_insertion_point(field_mutable:com.example.peopledensitymeasurementprototype.model.proto.LocationMessageWrapper.message)
  return msg_.message_;
}
::com::example::peopledensitymeasurementprototype::model::proto::WarnMessage* LocationMessageWrapper::release_message() {
  // @@protoc_insertion_point(field_release:com.example.peopledensitymeasurementprototype.model.proto.LocationMessageWrapper.message)
  if (has_message()) {
    clear_has_msg();
    ::com::example::peopledensitymeasurementprototype::model::proto::WarnMessage* temp = msg_.message_;
    msg_.message_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void LocationMessageWrapper::set_allocated_message(::com::example::peopledensitymeasurementprototype::model::proto::WarnMessage* message) {
  clear_msg();
  if (message) {
    set_has_message();
    msg_.message_ = message;
  }
  // @@protoc_insertion_point(field_set_allocated:com.example.peopledensitymeasurementprototype.model.proto.LocationMessageWrapper.message)
}

bool LocationMessageWrapper::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
void LocationMessageWrapper::clear_has_msg() {
  _oneof_case_[0] = MSG_NOT_SET;
}
LocationMessageWrapper::MsgCase LocationMessageWrapper::msg_case() const {
  return LocationMessageWrapper::MsgCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace model
}  // namespace peopledensitymeasurementprototype
}  // namespace example
}  // namespace com

// @@protoc_insertion_point(global_scope)
